{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\nvar serverURL = \"http://localhost:3001\";\nexport var request =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(path) {\n    var options,\n        response,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n            _context.prev = 1;\n\n            if (!(options === null)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return fetch(serverURL + path);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n            console.log(serverURL + path);\n            _context.next = 9;\n            return fetch(serverURL + path, {\n              method: options.method,\n              body: _JSON$stringify(options.body),\n              headers: options.headers\n            });\n\n          case 9:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            throw _context.t0;\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n\n  return function request(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/hugopapier/Documents/jobTriboo/app/utils/request.js"],"names":["fetch","serverURL","request","path","options","console","log","method","body","headers","response"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,IAAMC,SAAS,GAAE,uBAAjB;AAEA,OAAO,IAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAaC,YAAAA,OAAb,2DAAuB,IAAvB;AAAA;;AAAA,kBAEfA,OAAO,KAAK,IAFG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGJJ,KAAK,CAACC,SAAS,GAAGE,IAAb,CAHD;;AAAA;AAAA;;AAAA;AAKnBE,YAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,GAAGE,IAAxB;AALmB;AAAA,mBAMIH,KAAK,CAC1BC,SAAS,GAAGE,IADc,EAE1B;AACEI,cAAAA,MAAM,EAAEH,OAAO,CAACG,MADlB;AAEEC,cAAAA,IAAI,EAAE,gBAAeJ,OAAO,CAACI,IAAvB,CAFR;AAGEC,cAAAA,OAAO,EAAEL,OAAO,CAACK;AAHnB,aAF0B,CANT;;AAAA;AAMbC,YAAAA,QANa;AAAA,6CAeZA,QAfY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPR,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nconst serverURL= \"http://localhost:3001\";\n\nexport const request = async (path, options = null) => {\n  try {\n    if (options === null)\n      return await fetch(serverURL + path);\n    \n    console.log(serverURL + path);\n    const response = await fetch(\n      serverURL + path,\n      {\n        method: options.method,\n        body: JSON.stringify(options.body),\n        headers: options.headers\n      }\n    );\n      \n    return response;\n  } catch (e) {\n    throw e;\n  }\n}"]},"metadata":{},"sourceType":"module"}