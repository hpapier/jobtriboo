{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Button, TextField, Card, CardContent } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Header from '../store/container/header';\nimport { checkAuth } from '../utils/auth';\n\nvar DashboardBody = function DashboardBody() {\n  var _useState = useState(false),\n      announceToolStatus = _useState[0],\n      setAnnounceToolStatus = _useState[1];\n\n  var _useState2 = useState(''),\n      company = _useState2[0],\n      setCompany = _useState2[1];\n\n  var _useState3 = useState(''),\n      title = _useState3[0],\n      setTitle = _useState3[1];\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      width: '500px',\n      margin: 'auto'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: 500,\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginTop: 50\n    }\n  }, __jsx(\"h3\", null, \"No announces yet\"), __jsx(Button, {\n    variant: \"contained\",\n    style: {\n      backgroundColor: announceToolStatus ? '#ff4d4d' : '#4ecca3'\n    },\n    onClick: function onClick() {\n      return setAnnounceToolStatus(!announceToolStatus);\n    }\n  }, \"Create new announce\", !announceToolStatus ? __jsx(AddIcon, null) : __jsx(ClearIcon, null))), announceToolStatus ? __jsx(Card, {\n    style: {\n      marginTop: 30\n    }\n  }, __jsx(CardContent, null, __jsx(\"h1\", null, \"Post an announce\"), __jsx(\"div\", null, __jsx(TextField, {\n    variant: \"filled\",\n    label: \"Company\",\n    onChange: function onChange(e) {\n      return setCompany(e.target.value);\n    },\n    value: company,\n    style: {\n      margin: 5\n    }\n  }), __jsx(TextField, {\n    variant: \"filled\",\n    label: \"Title\",\n    onChange: function onChange(e) {\n      return setTitle(e.target.value);\n    },\n    value: title,\n    style: {\n      margin: 5\n    }\n  })))) : null);\n};\n\nvar Dashboard = function Dashboard(_ref) {\n  var isLoggedIn = _ref.isLoggedIn;\n  return __jsx(\"div\", null, __jsx(Header, {\n    isLoggedIn: isLoggedIn\n  }), __jsx(DashboardBody, null));\n};\n\nDashboard.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ctx) {\n    var isLoggedIn;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return checkAuth(ctx);\n\n          case 2:\n            isLoggedIn = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLoggedIn: isLoggedIn,\n              namespacesRequired: ['common']\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/hugopapier/Documents/jobTriboo/app/pages/dashboard.js"],"names":["React","useState","Button","TextField","Card","CardContent","AddIcon","ClearIcon","Header","checkAuth","DashboardBody","announceToolStatus","setAnnounceToolStatus","company","setCompany","title","setTitle","display","justifyContent","flexWrap","width","margin","marginTop","backgroundColor","e","target","value","Dashboard","isLoggedIn","getInitialProps","ctx","namespacesRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport { Button, TextField, Card, CardContent } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport Header from '../store/container/header'\nimport { checkAuth } from '../utils/auth'\n\nconst DashboardBody = () => {\n  const [ announceToolStatus, setAnnounceToolStatus ] = useState(false)\n  const [ company, setCompany ] = useState('');\n  const [ title, setTitle ] = useState('');\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', width: '500px', margin: 'auto' }}>\n      <div style={{ width: 500, display: 'flex', justifyContent: 'space-between', marginTop: 50 }}>\n        <h3>No announces yet</h3>\n        <Button\n          variant='contained'\n          style={{ backgroundColor: announceToolStatus ? '#ff4d4d' : '#4ecca3' }}\n          onClick={() => setAnnounceToolStatus(!announceToolStatus)}\n        >\n          Create new announce\n          { !announceToolStatus ? <AddIcon /> : <ClearIcon />}\n        </Button>\n      </div>\n\n      {\n        announceToolStatus ?\n        <Card style={{ marginTop: 30 }}>\n          <CardContent>\n            <h1>Post an announce</h1>\n            <div>\n              <TextField\n                variant=\"filled\"\n                label=\"Company\"\n                onChange={e => setCompany(e.target.value)}\n                value={company}\n                style={{ margin: 5 }}\n              />\n\n              <TextField\n                variant=\"filled\"\n                label=\"Title\"\n                onChange={e => setTitle(e.target.value)}\n                value={title}\n                style={{ margin: 5 }}\n              />\n            </div>\n\n          </CardContent>\n        </Card> :\n        null\n      }\n    </div>\n  );\n};\n\nconst Dashboard = ({ isLoggedIn }) => {\n  return (\n    <div>\n      <Header isLoggedIn={isLoggedIn} />\n      <DashboardBody />\n    </div>\n  );\n};\n\nDashboard.getInitialProps = async (ctx) => {\n  const isLoggedIn = await checkAuth(ctx);\n  //.. get current announces\n  return {\n    isLoggedIn,\n    namespacesRequired: ['common']\n  };\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}