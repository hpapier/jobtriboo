{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Button } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Header from '../store/container/header';\nimport { checkAuth } from '../utils/auth';\n\nvar DashboardBody = function DashboardBody() {\n  var _useState = useState(false),\n      announceToolStatus = _useState.announceToolStatus,\n      setAnnounceToolStatus = _useState.setAnnounceToolStatus;\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      width: '500px',\n      margin: 'auto'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: 500,\n      display: 'flex',\n      justifyContent: 'space-between',\n      marginTop: 50\n    }\n  }, __jsx(\"h3\", null, \"No announces yet\"), __jsx(Button, {\n    variant: \"contained\",\n    style: {\n      backgroundColor: announceToolStatus ? '#ff0000' : '#00ff00'\n    },\n    onClick: function onClick() {\n      return setAnnounceToolStatus(!announceToolStatus);\n    }\n  }, \"Create new announce\", announceToolStatus ? __jsx(AddIcon, null) : __jsx(ClearIcon, null))), __jsx(\"div\", null, \"DB body\"));\n};\n\nvar Dashboard = function Dashboard(_ref) {\n  var isLoggedIn = _ref.isLoggedIn;\n  return __jsx(\"div\", null, __jsx(Header, {\n    isLoggedIn: isLoggedIn\n  }), __jsx(DashboardBody, null));\n};\n\nDashboard.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ctx) {\n    var isLoggedIn;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return checkAuth(ctx);\n\n          case 2:\n            isLoggedIn = _context.sent;\n            return _context.abrupt(\"return\", {\n              isLoggedIn: isLoggedIn,\n              namespacesRequired: ['common']\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/hugopapier/Documents/jobTriboo/app/pages/dashboard.js"],"names":["Button","AddIcon","ClearIcon","Header","checkAuth","DashboardBody","useState","announceToolStatus","setAnnounceToolStatus","display","justifyContent","flexWrap","width","margin","marginTop","backgroundColor","Dashboard","isLoggedIn","getInitialProps","ctx","namespacesRequired"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,SAAT,QAA0B,eAA1B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,kBAC4BC,QAAQ,CAAC,KAAD,CADpC;AAAA,MAClBC,kBADkB,aAClBA,kBADkB;AAAA,MACEC,qBADF,aACEA,qBADF;;AAG1B,SACE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE,QAAnC;AAA6CC,MAAAA,QAAQ,EAAE,MAAvD;AAA+DC,MAAAA,KAAK,EAAE,OAAtE;AAA+EC,MAAAA,MAAM,EAAE;AAAvF;AAAZ,KACE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAE,GAAT;AAAcH,MAAAA,OAAO,EAAE,MAAvB;AAA+BC,MAAAA,cAAc,EAAE,eAA/C;AAAgEI,MAAAA,SAAS,EAAE;AAA3E;AAAZ,KAEE,qCAFF,EAGE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAE;AAAEC,MAAAA,eAAe,EAAER,kBAAkB,GAAG,SAAH,GAAe;AAApD,KAAnC;AAAoG,IAAA,OAAO,EAAE;AAAA,aAAMC,qBAAqB,CAAC,CAACD,kBAAF,CAA3B;AAAA;AAA7G,4BAEIA,kBAAkB,GAAG,MAAC,OAAD,OAAH,GAAiB,MAAC,SAAD,OAFvC,CAHF,CADF,EAUE,6BAVF,CADF;AAgBD,CAnBD;;AAqBA,IAAMS,SAAS,GAAG,SAAZA,SAAY,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACpC,SACE,mBACE,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAEA;AAApB,IADF,EAEE,MAAC,aAAD,OAFF,CADF;AAMD,CAPD;;AASAD,SAAS,CAACE,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA,2BAA4B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACDf,SAAS,CAACe,GAAD,CADR;;AAAA;AACpBF,YAAAA,UADoB;AAAA,6CAGnB;AACLA,cAAAA,UAAU,EAAVA,UADK;AAELG,cAAAA,kBAAkB,EAAE,CAAC,QAAD;AAFf,aAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AASA,eAAeJ,SAAf","sourcesContent":["import { Button } from '@material-ui/core'\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nimport Header from '../store/container/header'\nimport { checkAuth } from '../utils/auth'\n\nconst DashboardBody = () => {\n  const { announceToolStatus, setAnnounceToolStatus } = useState(false)\n\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', width: '500px', margin: 'auto' }}>\n      <div style={{ width: 500, display: 'flex', justifyContent: 'space-between', marginTop: 50 }}>\n        {/* Display all announces */}\n        <h3>No announces yet</h3>\n        <Button variant='contained' style={{ backgroundColor: announceToolStatus ? '#ff0000' : '#00ff00' }} onClick={() => setAnnounceToolStatus(!announceToolStatus)}>\n          Create new announce\n          { announceToolStatus ? <AddIcon /> : <ClearIcon />}\n        </Button>\n      </div>\n\n      <div>\n        DB body\n      </div>\n    </div>\n  );\n};\n\nconst Dashboard = ({ isLoggedIn }) => {\n  return (\n    <div>\n      <Header isLoggedIn={isLoggedIn} />\n      <DashboardBody />\n    </div>\n  );\n};\n\nDashboard.getInitialProps = async (ctx) => {\n  const isLoggedIn = await checkAuth(ctx);\n  //.. get current announces\n  return {\n    isLoggedIn,\n    namespacesRequired: ['common']\n  };\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}