{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { FormControl, Input, InputLabel, Button } from '@material-ui/core';\nimport { request } from '../utils/request';\nimport { withTranslation } from './i18n';\nconst LoginTab = withTranslation('common')(({\n  t,\n  setLoginState\n}) => {\n  const {\n    0: errorStatus,\n    1: setErrorStatus\n  } = useState(false);\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: connexionBtnStatus,\n    1: setConnectionBtnStatus\n  } = useState(false);\n  const [cookies, setCookies, removeCookies] = useCookies();\n\n  const handleConnexion = async e => {\n    e.preventDefault();\n    setConnectionBtnStatus(true);\n    console.log('SUBMITTED');\n\n    try {\n      const response = await request('/api/authentication', {\n        method: 'post',\n        body: {\n          email,\n          password\n        },\n        headers: {\n          'Content-type': 'application/json'\n        }\n      });\n      const data = await response.json();\n\n      if (response.status === 200) {\n        // Set the new cookie.\n        setCookies('token', data.token); // Login user.\n\n        setConnectionBtnStatus(false);\n        setLoginState(true);\n        console.log('PROCESS LOGIN COMPLETE');\n      } else {\n        setConnectionBtnStatus(false);\n        setErrorStatus(response.status);\n      }\n    } catch (e) {\n      setConnectionBtnStatus(false);\n      setErrorStatus(500);\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleConnexion\n  }, __jsx(\"div\", null, __jsx(FormControl, {\n    margin: \"normal\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"email\"\n  }, t('email')), __jsx(Input, {\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    type: \"email\",\n    name: \"email\",\n    autoComplete: \"email\",\n    error: errorStatus && email === \"\"\n  })), __jsx(FormControl, {\n    margin: \"normal\"\n  }, __jsx(InputLabel, {\n    htmlFor: \"password\"\n  }, t('password')), __jsx(Input, {\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    type: \"password\",\n    name: \"password\",\n    autoComplete: \"current-password\",\n    error: errorStatus && password === \"\"\n  }))), __jsx(\"div\", null, __jsx(Button, {\n    disabled: connexionBtnStatus,\n    variant: \"outlined\",\n    color: \"secondary\",\n    type: \"submit\"\n  }, t('connection'))), errorStatus === 500 ? 'ERROR OCCURED' : null);\n});\nexport default LoginTab;","map":{"version":3,"sources":["/Users/hugopapier/Documents/jobTriboo/app/components/login.js"],"names":["React","useState","useEffect","useCookies","FormControl","Input","InputLabel","Button","request","withTranslation","LoginTab","t","setLoginState","errorStatus","setErrorStatus","email","setEmail","password","setPassword","connexionBtnStatus","setConnectionBtnStatus","cookies","setCookies","removeCookies","handleConnexion","e","preventDefault","console","log","response","method","body","headers","data","json","status","token","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCC,MAAzC,QAAuD,mBAAvD;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,QAAgC,QAAhC;AAEA,MAAMC,QAAQ,GAAGD,eAAe,CAAC,QAAD,CAAf,CAA0B,CAAC;AAAEE,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAD,KAA0B;AAEnE,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCb,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM;AAAA,OAACc,KAAD;AAAA,OAAQC;AAAR,MAAoBf,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACgB,QAAD;AAAA,OAAWC;AAAX,MAA0BjB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACkB,kBAAD;AAAA,OAAqBC;AAArB,MAA+CnB,QAAQ,CAAC,KAAD,CAA7D;AACA,QAAM,CAACoB,OAAD,EAAUC,UAAV,EAAsBC,aAAtB,IAAuCpB,UAAU,EAAvD;;AAEA,QAAMqB,eAAe,GAAG,MAAMC,CAAN,IAAW;AACjCA,IAAAA,CAAC,CAACC,cAAF;AACAN,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMrB,OAAO,CAAC,qBAAD,EAAwB;AAAEsB,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAE;AAAEhB,UAAAA,KAAF;AAASE,UAAAA;AAAT,SAAxB;AAA6Ce,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB;AAAtD,OAAxB,CAA9B;AACA,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AAGA,UAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACAb,QAAAA,UAAU,CAAC,OAAD,EAAUW,IAAI,CAACG,KAAf,CAAV,CAF2B,CAI3B;;AACAhB,QAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAR,QAAAA,aAAa,CAAC,IAAD,CAAb;AAEAe,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,OATD,MAUK;AACHR,QAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAN,QAAAA,cAAc,CAACe,QAAQ,CAACM,MAAV,CAAd;AACD;AAEF,KApBD,CAoBE,OAAOV,CAAP,EAAU;AACVL,MAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAN,MAAAA,cAAc,CAAC,GAAD,CAAd;AACD;AAEF,GA/BD;;AAiCA,SACE;AAAM,IAAA,QAAQ,EAAEU;AAAhB,KACE,mBACE,MAAC,WAAD;AAAa,IAAA,MAAM,EAAC;AAApB,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KAA6Bb,CAAC,CAAC,OAAD,CAA9B,CADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEI,KADT;AAEE,IAAA,QAAQ,EAAEU,CAAC,IAAIT,QAAQ,CAACS,CAAC,CAACY,MAAF,CAASC,KAAV,CAFzB;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,IAAI,EAAC,OAJP;AAKE,IAAA,YAAY,EAAC,OALf;AAME,IAAA,KAAK,EAAEzB,WAAW,IAAIE,KAAK,KAAK;AANlC,IAFF,CADF,EAaE,MAAC,WAAD;AAAa,IAAA,MAAM,EAAC;AAApB,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC;AAApB,KAAgCJ,CAAC,CAAC,UAAD,CAAjC,CADF,EAEE,MAAC,KAAD;AACE,IAAA,KAAK,EAAEM,QADT;AAEE,IAAA,QAAQ,EAAEQ,CAAC,IAAIP,WAAW,CAACO,CAAC,CAACY,MAAF,CAASC,KAAV,CAF5B;AAGE,IAAA,IAAI,EAAC,UAHP;AAIE,IAAA,IAAI,EAAC,UAJP;AAKE,IAAA,YAAY,EAAC,kBALf;AAME,IAAA,KAAK,EAAEzB,WAAW,IAAII,QAAQ,KAAK;AANrC,IAFF,CAbF,CADF,EA2BE,mBACE,MAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEE,kBAAlB;AAAsC,IAAA,OAAO,EAAC,UAA9C;AAAyD,IAAA,KAAK,EAAC,WAA/D;AAA2E,IAAA,IAAI,EAAC;AAAhF,KAA0FR,CAAC,CAAC,YAAD,CAA3F,CADF,CA3BF,EA+BIE,WAAW,KAAK,GAAhB,GAAsB,eAAtB,GAAwC,IA/B5C,CADF;AAmCD,CA5EgB,CAAjB;AA+EA,eAAeH,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useCookies } from 'react-cookie'\nimport { FormControl, Input, InputLabel, Button } from '@material-ui/core'\n\nimport { request } from '../utils/request'\nimport { withTranslation } from './i18n'\n\nconst LoginTab = withTranslation('common')(({ t, setLoginState }) =>Â {\n\n  const [errorStatus, setErrorStatus] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [connexionBtnStatus, setConnectionBtnStatus] = useState(false);\n  const [cookies, setCookies, removeCookies] = useCookies();\n\n  const handleConnexion = async e => {\n    e.preventDefault();\n    setConnectionBtnStatus(true);\n\n    console.log('SUBMITTED');\n\n    try {\n      const response = await request('/api/authentication', { method: 'post', body: { email, password }, headers: { 'Content-type': 'application/json' }});\n      const data = await response.json();\n\n\n      if (response.status === 200) {\n        // Set the new cookie.\n        setCookies('token', data.token)\n\n        // Login user.\n        setConnectionBtnStatus(false);\n        setLoginState(true);\n\n        console.log('PROCESS LOGIN COMPLETE')\n      }\n      else {\n        setConnectionBtnStatus(false);\n        setErrorStatus(response.status);\n      }\n\n    } catch (e) {\n      setConnectionBtnStatus(false);\n      setErrorStatus(500);\n    }\n\n  }\n\n  return (\n    <form onSubmit={handleConnexion}>\n      <div>\n        <FormControl margin=\"normal\">\n          <InputLabel htmlFor=\"email\">{t('email')}</InputLabel>\n          <Input\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n            type=\"email\"\n            name=\"email\"\n            autoComplete=\"email\"\n            error={errorStatus && email === \"\"}\n          />\n        </FormControl>\n\n        <FormControl margin=\"normal\">\n          <InputLabel htmlFor=\"password\">{t('password')}</InputLabel>\n          <Input\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n            type=\"password\"\n            name=\"password\"\n            autoComplete=\"current-password\"\n            error={errorStatus && password === \"\"}\n          />\n        </FormControl>\n      </div>\n\n      <div>\n        <Button disabled={connexionBtnStatus} variant='outlined' color='secondary' type=\"submit\">{t('connection')}</Button>\n      </div>\n\n      { errorStatus === 500 ? 'ERROR OCCURED' : null }\n    </form>\n  );\n});\n\n\nexport default LoginTab;"]},"metadata":{},"sourceType":"module"}